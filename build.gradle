apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.sonarqube'
apply plugin: 'nebula.rpm'
apply plugin: 'nebula.deb'
apply plugin: "com.github.hierynomus.license"
//apply plugin: 'nebula.lint'

// rpm/deb package variables
def _vendor = 'Dell'
def _license = 'Apache License 2.0'
def _group = ''
def _url = 'http://support.dell.com'
def _arch = 'x86_64'
def _os = 'LINUX'
def _release = 1
def _sourcePaths=[]

sourceCompatibility = 1.8
version = "${version}"
dockerTag = "${dockerTag}"
group = 'com.dell.isg.smi'

buildscript {
	ext {
		springVersion = '4.3.6.RELEASE'
    	springBootVersion = '1.5.3.RELEASE'
    	springCloudVersion = 'Dalston.SR1'
	}
   repositories {
    mavenLocal()
	maven {
		url "${artifactory_contextUrl}/libs-release"
		url "https://plugins.gradle.org/m2/"

	}
  }
  dependencies {
  	classpath "io.spring.gradle:dependency-management-plugin:1.0.2.RELEASE"
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	classpath(group: 'com.netflix.nebula', name: 'gradle-ospackage-plugin', version: '4.4.0' )
	classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1"
	classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1"
	//classpath 'com.netflix.nebula:gradle-lint-plugin:latest.release'
  }
}

//gradleLint {
//  rules  = ['dependency-parentheses','overridden-dependency-version','duplicate-dependency-class', 'all-dependency','unused-dependency']
//}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
sonarqube {
    properties {
        property "sonar.projectName", "SMI :: Service :: Zuul Gateway"
        property "sonar.projectKey", "org.sonarqube:service-gateway-zuul"
    }
}


springBoot {
    executable = true
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Zuul Gateway Microservice',
                   'Implementation-Version': version
    }
    baseName = 'service-gateway-zuul'
}

repositories {
	mavenLocal()
	maven {
		url "${artifactory_contextUrl}/libs-release"
	}
	maven { url "${artifactory_contextUrl}/libs-snapshot" }
}


dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	compile "org.springframework.boot:spring-boot-starter-web"
	compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile 'org.springframework.cloud:spring-cloud-starter-consul-all'
    compile 'org.springframework.cloud:spring-cloud-starter-zuul'
    compile 'org.springframework.cloud:spring-cloud-starter-ribbon'
	compile 'org.springframework.cloud:spring-cloud-starter-feign'
    compile 'com.dell.isg.smi:commons-model:1.0-SNAPSHOT'
}

license {
        header rootProject.file('license-template')
        includes(["**/*.java", "**/*.properties"])
        strictCheck true
        ignoreFailures true
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
    	ext.name = 'DELL Inc.'
}

test {
    systemProperties 'property': 'value'
}


task generateRpm(type: Rpm){
	destinationDir = project.file('build/distributions')
	destinationDir.mkdirs()

	vendor = _vendor
	license = _license
	group = _group
	summary = 'Dell gateway-zuul service'
	description = 'Installs and runs the gateway-zuul microservice as a linux service'
	url = _url

	packageName = 'dell-smi-service-gateway-zuul'
	release = _release
	arch = _arch
	os = _os

	from fileTree( "build/libs" ), {
        include "*.jar"
        fileMode = 0755
		user = "root"
		addParentDirs = false
	    into  '/opt/dell/smi/service-gateway-zuul'
    }

	from fileTree("./"), {
        include "application.yml"
        fileMode = 0755
		//user = "root"
		//addParentDirs = true
	    into  '/opt/dell/smi/service-gateway-zuul'
    }


	from fileTree( "pkg" ), {
        include "dell-gateway-zuul.service"
		fileMode = 0777
	    into  '/etc/systemd/system'
    }
	link('/etc/systemd/system/multi-user.target.wants/dell-gateway-zuul.service', '/etc/systemd/system/dell-gateway-zuul.service')
}

task generateDeb(type: Deb){
	destinationDir = project.file('build/distributions')
	destinationDir.mkdirs()

	vendor = _vendor
	license = _license
	group = _group
	summary = 'Dell gateway-zuul service'
	description = 'Installs and runs the gateway-zuul microservice as a linux service'
	url = _url

	requires( 'postgresql', '9.4', GREATER | EQUAL)

	packageName = 'dell-smi-service-gateway-zuul'
	release = _release
	arch = 'all'
	os = _os

	from fileTree( "build/libs" ), {
        include "*.jar"
        fileMode = 0755
		user = "root"
		addParentDirs = true
	    into  '/opt/dell/smi/service-gateway-zuul'
    }

	from fileTree("./"), {
        include "application.yml"
        fileMode = 0755
		//user = "root"
		//addParentDirs = true
	    into  '/opt/dell/smi/service-gateway-zuul'
    }

	from fileTree( "pkg" ), {
        include "dell-server-action.service"
		fileMode = 0777
	    into  '/etc/systemd/system'
    }
	link('/etc/systemd/system/multi-user.target.wants/dell-gateway-zuul.service', '/etc/systemd/system/dell-gateway-zuul.service')
}


task buildSourcePathsArray(dependsOn: 'eclipseClasspath' ){
	doLast{
		def classpathFile = file('.classpath')
		if( classpathFile.exists() ) {
			def cpXml = new XmlParser().parse(classpathFile)
			cpXml.classpathentry.each {
				if('lib' == it.@kind ) {
					if( it.@sourcepath == null ){
						println 'missing source jar for:' + it.@path
					}
					else{
					 	_sourcePaths.add(it.@sourcepath)
					}
				}
			}
		}
		 
		def arrayLength = _sourcePaths.size()
		println 'sourcePaths length is:' + arrayLength
	}
}


task dependencySourcesZip(type: Zip, dependsOn: 'buildSourcePathsArray' ) {
	destinationDir = project.file('build/distributions')
	destinationDir.mkdirs()
	baseName = "smi-service-gateway-dependency-sources"
	version = "${dockerTag}"
	outputs.upToDateWhen { false }
 
    from _sourcePaths
}
